version: '3.2'

volumes:
  pg-data: {}
#  redis-data: {}
  tmp-data: {}

services:
  app: &app
    build:
      context: .
      dockerfile: Dockerfile
      args:
          UID: "${APP_UID:-10001}"
    user: "${APP_UID:-10001}:${APP_GID:-10001}"
    environment:
      PS1: '\[\033[1;32m\]\[\033[1;36m\][\u@\h] \[\033[1;34m\]\w\[\033[0;35m\] \[\033[1;36m\]# \[\033[0m\]'
      HOME: /tmp
      APP_DEBUG: 'true'
      APP_ENV: local
      DB_HOST: postgres
      DB_DATABASE: laravel
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
    volumes:
      - /etc/passwd:/etc/passwd:ro
      - /etc/group:/etc/group:ro
      - tmp-data:/tmp:rw
      - .:/app:rw
    depends_on:
      postgres:
        condition: service_healthy

  web:
    image: nginx:alpine
#    container_name: "web"
    restart: unless-stopped
    tty: true
    volumes:
    - ./:/app
    - ./nginx/conf.d/:/etc/nginx/conf.d/
    ports:
    - "8000:80"

#  queue:
#    <<: *app
##    command: php /app/artisan queue:work --memory=1024 --sleep=1
#    command: php /app/artisan queue:listen --memory=1024 --sleep=1 --timeout=120
#
#  cron:
#    <<: *app
#    command: supercronic /etc/supercronic/laravel # it runs artisan schedule:run

  postgres:
    image: postgres:14.1-alpine # Image page: <https://hub.docker.com/_/postgres>
    environment:
      POSTGRES_DB: laravel
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - pg-data:/var/lib/postgresql/data:rw
    healthcheck: # Healthcheck docs: <https://docs.docker.com/engine/reference/builder/#healthcheck>
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 2s
      timeout: 5s

  adminer:
    image: adminer
    restart: always
    ports:
    - '8080:8080'

  node:
      image: "node:lts-alpine"
#      user: "node"
      user: "${APP_UID:-10001}:${APP_GID:-10001}"
      working_dir: /home/node/app
#      environment:
#          - NODE_ENV=production
      volumes:
          - ./:/home/node/app
      expose:
          - "8081"
      command: "npm run watch"

#  redis:
#    image: redis:6.2.6-alpine # Image page: <https://hub.docker.com/_/redis>
#    command: redis-server --requirepass redis_password
#    volumes:
#      - redis-data:/data:rw
#    ports:
#      - 6379/tcp
#    healthcheck:
#      test: ['CMD-SHELL', 'redis-cli ping']
#      interval: 2s
#      timeout: 5s
